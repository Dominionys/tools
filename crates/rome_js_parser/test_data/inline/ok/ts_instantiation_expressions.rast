JsModule {
    interpreter_token: missing (optional),
    directives: JsDirectiveList [],
    items: JsModuleItemList [
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@0..4 "let" [] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@4..7 "f1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@7..9 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@9..11 "fx" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@11..12 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@12..18 "string" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@18..19 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@19..20 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@20..25 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@25..28 "f2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@28..30 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@30..32 "fx" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@32..33 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@33..39 "string" [] [],
                                        },
                                        COMMA@39..41 "," [] [Whitespace(" ")],
                                        TsNumberType {
                                            number_token: NUMBER_KW@41..47 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@47..48 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@48..49 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: LET_KW@49..54 "let" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@54..57 "f3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@57..59 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsComputedMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@59..61 "fx" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    l_brack_token: L_BRACK@61..62 "[" [] [],
                                    member: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@62..68 "'test'" [] [],
                                    },
                                    r_brack_token: R_BRACK@68..69 "]" [] [],
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@69..70 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsStringType {
                                            string_token: STRING_KW@70..76 "string" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@76..77 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@77..78 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@78..85 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@85..88 "a2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@88..90 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsStaticMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@90..91 "f" [] [],
                                        },
                                    },
                                    operator_token: DOT@91..92 "." [] [],
                                    member: JsName {
                                        value_token: IDENT@92..93 "g" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@93..94 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@94..100 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@100..101 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@101..119 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@119..126 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@126..129 "a3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@129..131 "=" [] [Whitespace(" ")],
                            expression: JsStaticMemberExpression {
                                object: TsInstantiationExpression {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@131..132 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@132..133 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@133..139 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@139..140 ">" [] [],
                                    },
                                },
                                operator_token: DOT@140..141 "." [] [],
                                member: JsName {
                                    value_token: IDENT@141..142 "g" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@142..158 ";" [] [Whitespace("  "), Comments("// <U>() => U")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@158..165 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@165..168 "a4" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@168..170 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsStaticMemberExpression {
                                    object: TsInstantiationExpression {
                                        expression: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@170..171 "f" [] [],
                                            },
                                        },
                                        arguments: TsTypeArguments {
                                            l_angle_token: L_ANGLE@171..172 "<" [] [],
                                            ts_type_argument_list: TsTypeArgumentList [
                                                TsNumberType {
                                                    number_token: NUMBER_KW@172..178 "number" [] [],
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@178..179 ">" [] [],
                                        },
                                    },
                                    operator_token: DOT@179..180 "." [] [],
                                    member: JsName {
                                        value_token: IDENT@180..181 "g" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@181..182 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@182..188 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@188..189 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@189..207 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@207..214 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@214..217 "a5" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@217..219 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsComputedMemberExpression {
                                    object: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@219..220 "f" [] [],
                                        },
                                    },
                                    optional_chain_token: missing (optional),
                                    l_brack_token: L_BRACK@220..221 "[" [] [],
                                    member: JsStringLiteralExpression {
                                        value_token: JS_STRING_LITERAL@221..224 "'g'" [] [],
                                    },
                                    r_brack_token: R_BRACK@224..225 "]" [] [],
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@225..226 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@226..232 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@232..233 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@233..251 ";" [] [Whitespace("  "), Comments("// () => number")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@251..258 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@258..261 "a7" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@261..263 "=" [] [Whitespace(" ")],
                            expression: JsComputedMemberExpression {
                                object: JsParenthesizedExpression {
                                    l_paren_token: L_PAREN@263..264 "(" [] [],
                                    expression: TsInstantiationExpression {
                                        expression: JsIdentifierExpression {
                                            name: JsReferenceIdentifier {
                                                value_token: IDENT@264..265 "f" [] [],
                                            },
                                        },
                                        arguments: TsTypeArguments {
                                            l_angle_token: L_ANGLE@265..266 "<" [] [],
                                            ts_type_argument_list: TsTypeArgumentList [
                                                TsNumberType {
                                                    number_token: NUMBER_KW@266..272 "number" [] [],
                                                },
                                            ],
                                            r_angle_token: R_ANGLE@272..273 ">" [] [],
                                        },
                                    },
                                    r_paren_token: R_PAREN@273..274 ")" [] [],
                                },
                                optional_chain_token: missing (optional),
                                l_brack_token: L_BRACK@274..275 "[" [] [],
                                member: JsStringLiteralExpression {
                                    value_token: JS_STRING_LITERAL@275..278 "'g'" [] [],
                                },
                                r_brack_token: R_BRACK@278..279 "]" [] [],
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@279..280 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@280..287 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@287..290 "a6" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@290..292 "=" [] [Whitespace(" ")],
                            expression: JsBinaryExpression {
                                left: JsBinaryExpression {
                                    left: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@292..293 "f" [] [],
                                        },
                                    },
                                    operator_token: L_ANGLE@293..294 "<" [] [],
                                    right: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@294..300 "number" [] [],
                                        },
                                    },
                                },
                                operator_token: R_ANGLE@300..301 ">" [] [],
                                right: JsArrayExpression {
                                    l_brack_token: L_BRACK@301..302 "[" [] [],
                                    elements: JsArrayElementList [
                                        JsStringLiteralExpression {
                                            value_token: JS_STRING_LITERAL@302..305 "'g'" [] [],
                                        },
                                    ],
                                    r_brack_token: R_BRACK@305..306 "]" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@306..322 ";" [] [Whitespace("  "), Comments("// type Error")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@322..329 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@329..332 "b2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@332..334 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@334..335 "f" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@335..337 "?." [] [],
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@337..338 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@338..344 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@344..345 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@345..346 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@346..347 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@347..348 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@348..355 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@355..358 "b3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@358..360 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: TsInstantiationExpression {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@360..361 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@361..362 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@362..368 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@368..369 ">" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@369..371 "?." [] [],
                                type_arguments: missing (optional),
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@371..372 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@372..373 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@373..374 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@374..381 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@381..384 "b4" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@384..386 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: TsInstantiationExpression {
                                    expression: JsIdentifierExpression {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@386..387 "f" [] [],
                                        },
                                    },
                                    arguments: TsTypeArguments {
                                        l_angle_token: L_ANGLE@387..388 "<" [] [],
                                        ts_type_argument_list: TsTypeArgumentList [
                                            TsNumberType {
                                                number_token: NUMBER_KW@388..394 "number" [] [],
                                            },
                                        ],
                                        r_angle_token: R_ANGLE@394..395 ">" [] [],
                                    },
                                },
                                optional_chain_token: QUESTIONDOT@395..397 "?." [] [],
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@397..398 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsNumberType {
                                            number_token: NUMBER_KW@398..404 "number" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@404..405 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@405..406 "(" [] [],
                                    args: JsCallArgumentList [],
                                    r_paren_token: R_PAREN@406..407 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@407..451 ";" [] [Whitespace("  "), Comments("// Type Error, expect ...")],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@451..458 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@458..461 "x1" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@461..463 "=" [] [Whitespace(" ")],
                            expression: JsCallExpression {
                                callee: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@463..464 "f" [] [],
                                    },
                                },
                                optional_chain_token: missing (optional),
                                type_arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@464..465 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@465..469 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@469..470 ">" [] [],
                                },
                                arguments: JsCallArguments {
                                    l_paren_token: L_PAREN@470..472 "(" [Newline("\n")] [],
                                    args: JsCallArgumentList [
                                        JsBooleanLiteralExpression {
                                            value_token: TRUE_KW@472..476 "true" [] [],
                                        },
                                    ],
                                    r_paren_token: R_PAREN@476..477 ")" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@477..478 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@478..485 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@485..488 "x2" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@488..490 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@490..491 "f" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@491..492 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@492..496 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@496..497 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: missing (optional),
        },
        JsExpressionStatement {
            expression: JsBooleanLiteralExpression {
                value_token: TRUE_KW@497..502 "true" [Newline("\n")] [],
            },
            semicolon_token: SEMICOLON@502..503 ";" [] [],
        },
        JsVariableStatement {
            declaration: JsVariableDeclaration {
                kind: CONST_KW@503..510 "const" [Newline("\n")] [Whitespace(" ")],
                declarators: JsVariableDeclaratorList [
                    JsVariableDeclarator {
                        id: JsIdentifierBinding {
                            name_token: IDENT@510..513 "x3" [] [Whitespace(" ")],
                        },
                        variable_annotation: missing (optional),
                        initializer: JsInitializerClause {
                            eq_token: EQ@513..515 "=" [] [Whitespace(" ")],
                            expression: TsInstantiationExpression {
                                expression: JsIdentifierExpression {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@515..516 "f" [] [],
                                    },
                                },
                                arguments: TsTypeArguments {
                                    l_angle_token: L_ANGLE@516..517 "<" [] [],
                                    ts_type_argument_list: TsTypeArgumentList [
                                        TsBooleanLiteralType {
                                            literal: TRUE_KW@517..521 "true" [] [],
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@521..522 ">" [] [],
                                },
                            },
                        },
                    },
                ],
            },
            semicolon_token: SEMICOLON@522..523 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsBooleanLiteralExpression {
                value_token: TRUE_KW@523..528 "true" [Newline("\n")] [],
            },
            semicolon_token: SEMICOLON@528..529 ";" [] [],
        },
        JsExpressionStatement {
            expression: TsInstantiationExpression {
                expression: JsParenthesizedExpression {
                    l_paren_token: L_PAREN@529..531 "(" [Newline("\n")] [],
                    expression: TsInstantiationExpression {
                        expression: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@531..532 "f" [] [],
                            },
                        },
                        arguments: TsTypeArguments {
                            l_angle_token: L_ANGLE@532..533 "<" [] [],
                            ts_type_argument_list: TsTypeArgumentList [
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@533..534 "T" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            ],
                            r_angle_token: R_ANGLE@534..535 ">" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@535..536 ")" [] [],
                },
                arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@536..537 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [
                        TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@537..538 "K" [] [],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@538..539 ">" [] [],
                },
            },
            semicolon_token: SEMICOLON@539..540 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: JsParenthesizedExpression {
                    l_paren_token: L_PAREN@540..542 "(" [Newline("\n")] [],
                    expression: TsInstantiationExpression {
                        expression: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@542..543 "f" [] [],
                            },
                        },
                        arguments: TsTypeArguments {
                            l_angle_token: L_ANGLE@543..544 "<" [] [],
                            ts_type_argument_list: TsTypeArgumentList [
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@544..545 "T" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            ],
                            r_angle_token: R_ANGLE@545..546 ">" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@546..547 ")" [] [],
                },
                optional_chain_token: missing (optional),
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@547..548 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [
                        TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@548..549 "K" [] [],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@549..550 ">" [] [],
                },
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@550..551 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@551..552 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@552..553 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: TsInstantiationExpression {
                    expression: JsParenthesizedExpression {
                        l_paren_token: L_PAREN@553..555 "(" [Newline("\n")] [],
                        expression: TsInstantiationExpression {
                            expression: JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@555..556 "f" [] [],
                                },
                            },
                            arguments: TsTypeArguments {
                                l_angle_token: L_ANGLE@556..557 "<" [] [],
                                ts_type_argument_list: TsTypeArgumentList [
                                    TsReferenceType {
                                        name: JsReferenceIdentifier {
                                            value_token: IDENT@557..558 "T" [] [],
                                        },
                                        type_arguments: missing (optional),
                                    },
                                ],
                                r_angle_token: R_ANGLE@558..559 ">" [] [],
                            },
                        },
                        r_paren_token: R_PAREN@559..560 ")" [] [],
                    },
                    arguments: TsTypeArguments {
                        l_angle_token: L_ANGLE@560..561 "<" [] [],
                        ts_type_argument_list: TsTypeArgumentList [
                            TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@561..562 "K" [] [],
                                },
                                type_arguments: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@562..563 ">" [] [],
                    },
                },
                optional_chain_token: QUESTIONDOT@563..565 "?." [] [],
                type_arguments: missing (optional),
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@565..566 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@566..567 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@567..568 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: JsParenthesizedExpression {
                    l_paren_token: L_PAREN@568..570 "(" [Newline("\n")] [],
                    expression: TsInstantiationExpression {
                        expression: JsStaticMemberExpression {
                            object: JsIdentifierExpression {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@570..571 "a" [] [],
                                },
                            },
                            operator_token: QUESTIONDOT@571..573 "?." [] [],
                            member: JsName {
                                value_token: IDENT@573..574 "f" [] [],
                            },
                        },
                        arguments: TsTypeArguments {
                            l_angle_token: L_ANGLE@574..575 "<" [] [],
                            ts_type_argument_list: TsTypeArgumentList [
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@575..576 "T" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            ],
                            r_angle_token: R_ANGLE@576..577 ">" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@577..578 ")" [] [],
                },
                optional_chain_token: missing (optional),
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@578..579 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [
                        TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@579..580 "K" [] [],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@580..581 ">" [] [],
                },
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@581..582 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@582..583 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@583..584 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsNewExpression {
                new_token: NEW_KW@584..589 "new" [Newline("\n")] [Whitespace(" ")],
                callee: JsParenthesizedExpression {
                    l_paren_token: L_PAREN@589..590 "(" [] [],
                    expression: TsInstantiationExpression {
                        expression: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@590..591 "a" [] [],
                            },
                        },
                        arguments: TsTypeArguments {
                            l_angle_token: L_ANGLE@591..592 "<" [] [],
                            ts_type_argument_list: TsTypeArgumentList [
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@592..593 "T" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            ],
                            r_angle_token: R_ANGLE@593..594 ">" [] [],
                        },
                    },
                    r_paren_token: R_PAREN@594..595 ")" [] [],
                },
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@595..596 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [
                        TsReferenceType {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@596..597 "K" [] [],
                            },
                            type_arguments: missing (optional),
                        },
                    ],
                    r_angle_token: R_ANGLE@597..598 ">" [] [],
                },
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@598..599 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@599..600 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@600..601 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: TsInstantiationExpression {
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@601..603 "f" [Newline("\n")] [],
                        },
                    },
                    arguments: TsTypeArguments {
                        l_angle_token: L_ANGLE@603..604 "<" [] [],
                        ts_type_argument_list: TsTypeArgumentList [
                            TsFunctionType {
                                type_parameters: TsTypeParameters {
                                    l_angle_token: L_ANGLE@604..605 "<" [] [],
                                    items: TsTypeParameterList [
                                        TsTypeParameter {
                                            name: TsTypeParameterName {
                                                ident_token: IDENT@605..606 "T" [] [],
                                            },
                                            constraint: missing (optional),
                                            default: missing (optional),
                                        },
                                    ],
                                    r_angle_token: R_ANGLE@606..607 ">" [] [],
                                },
                                parameters: JsParameters {
                                    l_paren_token: L_PAREN@607..608 "(" [] [],
                                    items: JsParameterList [],
                                    r_paren_token: R_PAREN@608..610 ")" [] [Whitespace(" ")],
                                },
                                fat_arrow_token: FAT_ARROW@610..613 "=>" [] [Whitespace(" ")],
                                return_type: TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@613..614 "T" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            },
                        ],
                        r_angle_token: R_ANGLE@614..615 ">" [] [],
                    },
                },
                optional_chain_token: QUESTIONDOT@615..617 "?." [] [],
                type_arguments: missing (optional),
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@617..618 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@618..619 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@619..620 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsCallExpression {
                callee: JsIdentifierExpression {
                    name: JsReferenceIdentifier {
                        value_token: IDENT@620..622 "f" [Newline("\n")] [],
                    },
                },
                optional_chain_token: QUESTIONDOT@622..624 "?." [] [],
                type_arguments: TsTypeArguments {
                    l_angle_token: L_ANGLE@624..625 "<" [] [],
                    ts_type_argument_list: TsTypeArgumentList [
                        TsFunctionType {
                            type_parameters: TsTypeParameters {
                                l_angle_token: L_ANGLE@625..626 "<" [] [],
                                items: TsTypeParameterList [
                                    TsTypeParameter {
                                        name: TsTypeParameterName {
                                            ident_token: IDENT@626..627 "T" [] [],
                                        },
                                        constraint: missing (optional),
                                        default: missing (optional),
                                    },
                                ],
                                r_angle_token: R_ANGLE@627..628 ">" [] [],
                            },
                            parameters: JsParameters {
                                l_paren_token: L_PAREN@628..629 "(" [] [],
                                items: JsParameterList [],
                                r_paren_token: R_PAREN@629..631 ")" [] [Whitespace(" ")],
                            },
                            fat_arrow_token: FAT_ARROW@631..634 "=>" [] [Whitespace(" ")],
                            return_type: TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@634..635 "T" [] [],
                                },
                                type_arguments: missing (optional),
                            },
                        },
                    ],
                    r_angle_token: R_ANGLE@635..636 ">" [] [],
                },
                arguments: JsCallArguments {
                    l_paren_token: L_PAREN@636..637 "(" [] [],
                    args: JsCallArgumentList [],
                    r_paren_token: R_PAREN@637..638 ")" [] [],
                },
            },
            semicolon_token: SEMICOLON@638..639 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsConditionalExpression {
                test: TsInstantiationExpression {
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@639..641 "f" [Newline("\n")] [],
                        },
                    },
                    arguments: TsTypeArguments {
                        l_angle_token: L_ANGLE@641..642 "<" [] [],
                        ts_type_argument_list: TsTypeArgumentList [
                            TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@642..643 "x" [] [],
                                },
                                type_arguments: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@643..645 ">" [] [Whitespace(" ")],
                    },
                },
                question_mark_token: QUESTION@645..647 "?" [] [Whitespace(" ")],
                consequent: TsInstantiationExpression {
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@647..648 "g" [] [],
                        },
                    },
                    arguments: TsTypeArguments {
                        l_angle_token: L_ANGLE@648..649 "<" [] [],
                        ts_type_argument_list: TsTypeArgumentList [
                            TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@649..650 "y" [] [],
                                },
                                type_arguments: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@650..652 ">" [] [Whitespace(" ")],
                    },
                },
                colon_token: COLON@652..654 ":" [] [Whitespace(" ")],
                alternate: TsInstantiationExpression {
                    expression: JsIdentifierExpression {
                        name: JsReferenceIdentifier {
                            value_token: IDENT@654..655 "h" [] [],
                        },
                    },
                    arguments: TsTypeArguments {
                        l_angle_token: L_ANGLE@655..656 "<" [] [],
                        ts_type_argument_list: TsTypeArgumentList [
                            TsReferenceType {
                                name: JsReferenceIdentifier {
                                    value_token: IDENT@656..657 "z" [] [],
                                },
                                type_arguments: missing (optional),
                            },
                        ],
                        r_angle_token: R_ANGLE@657..658 ">" [] [],
                    },
                },
            },
            semicolon_token: SEMICOLON@658..659 ";" [] [],
        },
        JsExpressionStatement {
            expression: JsArrayExpression {
                l_brack_token: L_BRACK@659..661 "[" [Newline("\n")] [],
                elements: JsArrayElementList [
                    TsInstantiationExpression {
                        expression: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@661..662 "f" [] [],
                            },
                        },
                        arguments: TsTypeArguments {
                            l_angle_token: L_ANGLE@662..663 "<" [] [],
                            ts_type_argument_list: TsTypeArgumentList [
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@663..664 "x" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            ],
                            r_angle_token: R_ANGLE@664..665 ">" [] [],
                        },
                    },
                ],
                r_brack_token: R_BRACK@665..666 "]" [] [],
            },
            semicolon_token: SEMICOLON@666..667 ";" [] [],
        },
        JsBlockStatement {
            l_curly_token: L_CURLY@667..670 "{" [Newline("\n")] [Whitespace(" ")],
            statements: JsStatementList [
                JsExpressionStatement {
                    expression: TsInstantiationExpression {
                        expression: JsIdentifierExpression {
                            name: JsReferenceIdentifier {
                                value_token: IDENT@670..671 "f" [] [],
                            },
                        },
                        arguments: TsTypeArguments {
                            l_angle_token: L_ANGLE@671..672 "<" [] [],
                            ts_type_argument_list: TsTypeArgumentList [
                                TsReferenceType {
                                    name: JsReferenceIdentifier {
                                        value_token: IDENT@672..673 "x" [] [],
                                    },
                                    type_arguments: missing (optional),
                                },
                            ],
                            r_angle_token: R_ANGLE@673..675 ">" [] [Whitespace(" ")],
                        },
                    },
                    semicolon_token: missing (optional),
                },
            ],
            r_curly_token: R_CURLY@675..676 "}" [] [],
        },
    ],
    eof_token: EOF@676..677 "" [Newline("\n")] [],
}

0: JS_MODULE@0..677
  0: (empty)
  1: JS_DIRECTIVE_LIST@0..0
  2: JS_MODULE_ITEM_LIST@0..676
    0: JS_VARIABLE_STATEMENT@0..20
      0: JS_VARIABLE_DECLARATION@0..19
        0: LET_KW@0..4 "let" [] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@4..19
          0: JS_VARIABLE_DECLARATOR@4..19
            0: JS_IDENTIFIER_BINDING@4..7
              0: IDENT@4..7 "f1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@7..19
              0: EQ@7..9 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@9..19
                0: JS_IDENTIFIER_EXPRESSION@9..11
                  0: JS_REFERENCE_IDENTIFIER@9..11
                    0: IDENT@9..11 "fx" [] []
                1: TS_TYPE_ARGUMENTS@11..19
                  0: L_ANGLE@11..12 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@12..18
                    0: TS_STRING_TYPE@12..18
                      0: STRING_KW@12..18 "string" [] []
                  2: R_ANGLE@18..19 ">" [] []
      1: SEMICOLON@19..20 ";" [] []
    1: JS_VARIABLE_STATEMENT@20..49
      0: JS_VARIABLE_DECLARATION@20..48
        0: LET_KW@20..25 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@25..48
          0: JS_VARIABLE_DECLARATOR@25..48
            0: JS_IDENTIFIER_BINDING@25..28
              0: IDENT@25..28 "f2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@28..48
              0: EQ@28..30 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@30..48
                0: JS_IDENTIFIER_EXPRESSION@30..32
                  0: JS_REFERENCE_IDENTIFIER@30..32
                    0: IDENT@30..32 "fx" [] []
                1: TS_TYPE_ARGUMENTS@32..48
                  0: L_ANGLE@32..33 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@33..47
                    0: TS_STRING_TYPE@33..39
                      0: STRING_KW@33..39 "string" [] []
                    1: COMMA@39..41 "," [] [Whitespace(" ")]
                    2: TS_NUMBER_TYPE@41..47
                      0: NUMBER_KW@41..47 "number" [] []
                  2: R_ANGLE@47..48 ">" [] []
      1: SEMICOLON@48..49 ";" [] []
    2: JS_VARIABLE_STATEMENT@49..78
      0: JS_VARIABLE_DECLARATION@49..77
        0: LET_KW@49..54 "let" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@54..77
          0: JS_VARIABLE_DECLARATOR@54..77
            0: JS_IDENTIFIER_BINDING@54..57
              0: IDENT@54..57 "f3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@57..77
              0: EQ@57..59 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@59..77
                0: JS_COMPUTED_MEMBER_EXPRESSION@59..69
                  0: JS_IDENTIFIER_EXPRESSION@59..61
                    0: JS_REFERENCE_IDENTIFIER@59..61
                      0: IDENT@59..61 "fx" [] []
                  1: (empty)
                  2: L_BRACK@61..62 "[" [] []
                  3: JS_STRING_LITERAL_EXPRESSION@62..68
                    0: JS_STRING_LITERAL@62..68 "'test'" [] []
                  4: R_BRACK@68..69 "]" [] []
                1: TS_TYPE_ARGUMENTS@69..77
                  0: L_ANGLE@69..70 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@70..76
                    0: TS_STRING_TYPE@70..76
                      0: STRING_KW@70..76 "string" [] []
                  2: R_ANGLE@76..77 ">" [] []
      1: SEMICOLON@77..78 ";" [] []
    3: JS_VARIABLE_STATEMENT@78..119
      0: JS_VARIABLE_DECLARATION@78..101
        0: CONST_KW@78..85 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@85..101
          0: JS_VARIABLE_DECLARATOR@85..101
            0: JS_IDENTIFIER_BINDING@85..88
              0: IDENT@85..88 "a2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@88..101
              0: EQ@88..90 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@90..101
                0: JS_STATIC_MEMBER_EXPRESSION@90..93
                  0: JS_IDENTIFIER_EXPRESSION@90..91
                    0: JS_REFERENCE_IDENTIFIER@90..91
                      0: IDENT@90..91 "f" [] []
                  1: DOT@91..92 "." [] []
                  2: JS_NAME@92..93
                    0: IDENT@92..93 "g" [] []
                1: TS_TYPE_ARGUMENTS@93..101
                  0: L_ANGLE@93..94 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@94..100
                    0: TS_NUMBER_TYPE@94..100
                      0: NUMBER_KW@94..100 "number" [] []
                  2: R_ANGLE@100..101 ">" [] []
      1: SEMICOLON@101..119 ";" [] [Whitespace("  "), Comments("// () => number")]
    4: JS_VARIABLE_STATEMENT@119..158
      0: JS_VARIABLE_DECLARATION@119..142
        0: CONST_KW@119..126 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@126..142
          0: JS_VARIABLE_DECLARATOR@126..142
            0: JS_IDENTIFIER_BINDING@126..129
              0: IDENT@126..129 "a3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@129..142
              0: EQ@129..131 "=" [] [Whitespace(" ")]
              1: JS_STATIC_MEMBER_EXPRESSION@131..142
                0: TS_INSTANTIATION_EXPRESSION@131..140
                  0: JS_IDENTIFIER_EXPRESSION@131..132
                    0: JS_REFERENCE_IDENTIFIER@131..132
                      0: IDENT@131..132 "f" [] []
                  1: TS_TYPE_ARGUMENTS@132..140
                    0: L_ANGLE@132..133 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@133..139
                      0: TS_NUMBER_TYPE@133..139
                        0: NUMBER_KW@133..139 "number" [] []
                    2: R_ANGLE@139..140 ">" [] []
                1: DOT@140..141 "." [] []
                2: JS_NAME@141..142
                  0: IDENT@141..142 "g" [] []
      1: SEMICOLON@142..158 ";" [] [Whitespace("  "), Comments("// <U>() => U")]
    5: JS_VARIABLE_STATEMENT@158..207
      0: JS_VARIABLE_DECLARATION@158..189
        0: CONST_KW@158..165 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@165..189
          0: JS_VARIABLE_DECLARATOR@165..189
            0: JS_IDENTIFIER_BINDING@165..168
              0: IDENT@165..168 "a4" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@168..189
              0: EQ@168..170 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@170..189
                0: JS_STATIC_MEMBER_EXPRESSION@170..181
                  0: TS_INSTANTIATION_EXPRESSION@170..179
                    0: JS_IDENTIFIER_EXPRESSION@170..171
                      0: JS_REFERENCE_IDENTIFIER@170..171
                        0: IDENT@170..171 "f" [] []
                    1: TS_TYPE_ARGUMENTS@171..179
                      0: L_ANGLE@171..172 "<" [] []
                      1: TS_TYPE_ARGUMENT_LIST@172..178
                        0: TS_NUMBER_TYPE@172..178
                          0: NUMBER_KW@172..178 "number" [] []
                      2: R_ANGLE@178..179 ">" [] []
                  1: DOT@179..180 "." [] []
                  2: JS_NAME@180..181
                    0: IDENT@180..181 "g" [] []
                1: TS_TYPE_ARGUMENTS@181..189
                  0: L_ANGLE@181..182 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@182..188
                    0: TS_NUMBER_TYPE@182..188
                      0: NUMBER_KW@182..188 "number" [] []
                  2: R_ANGLE@188..189 ">" [] []
      1: SEMICOLON@189..207 ";" [] [Whitespace("  "), Comments("// () => number")]
    6: JS_VARIABLE_STATEMENT@207..251
      0: JS_VARIABLE_DECLARATION@207..233
        0: CONST_KW@207..214 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@214..233
          0: JS_VARIABLE_DECLARATOR@214..233
            0: JS_IDENTIFIER_BINDING@214..217
              0: IDENT@214..217 "a5" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@217..233
              0: EQ@217..219 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@219..233
                0: JS_COMPUTED_MEMBER_EXPRESSION@219..225
                  0: JS_IDENTIFIER_EXPRESSION@219..220
                    0: JS_REFERENCE_IDENTIFIER@219..220
                      0: IDENT@219..220 "f" [] []
                  1: (empty)
                  2: L_BRACK@220..221 "[" [] []
                  3: JS_STRING_LITERAL_EXPRESSION@221..224
                    0: JS_STRING_LITERAL@221..224 "'g'" [] []
                  4: R_BRACK@224..225 "]" [] []
                1: TS_TYPE_ARGUMENTS@225..233
                  0: L_ANGLE@225..226 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@226..232
                    0: TS_NUMBER_TYPE@226..232
                      0: NUMBER_KW@226..232 "number" [] []
                  2: R_ANGLE@232..233 ">" [] []
      1: SEMICOLON@233..251 ";" [] [Whitespace("  "), Comments("// () => number")]
    7: JS_VARIABLE_STATEMENT@251..280
      0: JS_VARIABLE_DECLARATION@251..279
        0: CONST_KW@251..258 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@258..279
          0: JS_VARIABLE_DECLARATOR@258..279
            0: JS_IDENTIFIER_BINDING@258..261
              0: IDENT@258..261 "a7" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@261..279
              0: EQ@261..263 "=" [] [Whitespace(" ")]
              1: JS_COMPUTED_MEMBER_EXPRESSION@263..279
                0: JS_PARENTHESIZED_EXPRESSION@263..274
                  0: L_PAREN@263..264 "(" [] []
                  1: TS_INSTANTIATION_EXPRESSION@264..273
                    0: JS_IDENTIFIER_EXPRESSION@264..265
                      0: JS_REFERENCE_IDENTIFIER@264..265
                        0: IDENT@264..265 "f" [] []
                    1: TS_TYPE_ARGUMENTS@265..273
                      0: L_ANGLE@265..266 "<" [] []
                      1: TS_TYPE_ARGUMENT_LIST@266..272
                        0: TS_NUMBER_TYPE@266..272
                          0: NUMBER_KW@266..272 "number" [] []
                      2: R_ANGLE@272..273 ">" [] []
                  2: R_PAREN@273..274 ")" [] []
                1: (empty)
                2: L_BRACK@274..275 "[" [] []
                3: JS_STRING_LITERAL_EXPRESSION@275..278
                  0: JS_STRING_LITERAL@275..278 "'g'" [] []
                4: R_BRACK@278..279 "]" [] []
      1: SEMICOLON@279..280 ";" [] []
    8: JS_VARIABLE_STATEMENT@280..322
      0: JS_VARIABLE_DECLARATION@280..306
        0: CONST_KW@280..287 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@287..306
          0: JS_VARIABLE_DECLARATOR@287..306
            0: JS_IDENTIFIER_BINDING@287..290
              0: IDENT@287..290 "a6" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@290..306
              0: EQ@290..292 "=" [] [Whitespace(" ")]
              1: JS_BINARY_EXPRESSION@292..306
                0: JS_BINARY_EXPRESSION@292..300
                  0: JS_IDENTIFIER_EXPRESSION@292..293
                    0: JS_REFERENCE_IDENTIFIER@292..293
                      0: IDENT@292..293 "f" [] []
                  1: L_ANGLE@293..294 "<" [] []
                  2: JS_IDENTIFIER_EXPRESSION@294..300
                    0: JS_REFERENCE_IDENTIFIER@294..300
                      0: IDENT@294..300 "number" [] []
                1: R_ANGLE@300..301 ">" [] []
                2: JS_ARRAY_EXPRESSION@301..306
                  0: L_BRACK@301..302 "[" [] []
                  1: JS_ARRAY_ELEMENT_LIST@302..305
                    0: JS_STRING_LITERAL_EXPRESSION@302..305
                      0: JS_STRING_LITERAL@302..305 "'g'" [] []
                  2: R_BRACK@305..306 "]" [] []
      1: SEMICOLON@306..322 ";" [] [Whitespace("  "), Comments("// type Error")]
    9: JS_VARIABLE_STATEMENT@322..348
      0: JS_VARIABLE_DECLARATION@322..347
        0: CONST_KW@322..329 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@329..347
          0: JS_VARIABLE_DECLARATOR@329..347
            0: JS_IDENTIFIER_BINDING@329..332
              0: IDENT@329..332 "b2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@332..347
              0: EQ@332..334 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@334..347
                0: JS_IDENTIFIER_EXPRESSION@334..335
                  0: JS_REFERENCE_IDENTIFIER@334..335
                    0: IDENT@334..335 "f" [] []
                1: QUESTIONDOT@335..337 "?." [] []
                2: TS_TYPE_ARGUMENTS@337..345
                  0: L_ANGLE@337..338 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@338..344
                    0: TS_NUMBER_TYPE@338..344
                      0: NUMBER_KW@338..344 "number" [] []
                  2: R_ANGLE@344..345 ">" [] []
                3: JS_CALL_ARGUMENTS@345..347
                  0: L_PAREN@345..346 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@346..346
                  2: R_PAREN@346..347 ")" [] []
      1: SEMICOLON@347..348 ";" [] []
    10: JS_VARIABLE_STATEMENT@348..374
      0: JS_VARIABLE_DECLARATION@348..373
        0: CONST_KW@348..355 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@355..373
          0: JS_VARIABLE_DECLARATOR@355..373
            0: JS_IDENTIFIER_BINDING@355..358
              0: IDENT@355..358 "b3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@358..373
              0: EQ@358..360 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@360..373
                0: TS_INSTANTIATION_EXPRESSION@360..369
                  0: JS_IDENTIFIER_EXPRESSION@360..361
                    0: JS_REFERENCE_IDENTIFIER@360..361
                      0: IDENT@360..361 "f" [] []
                  1: TS_TYPE_ARGUMENTS@361..369
                    0: L_ANGLE@361..362 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@362..368
                      0: TS_NUMBER_TYPE@362..368
                        0: NUMBER_KW@362..368 "number" [] []
                    2: R_ANGLE@368..369 ">" [] []
                1: QUESTIONDOT@369..371 "?." [] []
                2: (empty)
                3: JS_CALL_ARGUMENTS@371..373
                  0: L_PAREN@371..372 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@372..372
                  2: R_PAREN@372..373 ")" [] []
      1: SEMICOLON@373..374 ";" [] []
    11: JS_VARIABLE_STATEMENT@374..451
      0: JS_VARIABLE_DECLARATION@374..407
        0: CONST_KW@374..381 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@381..407
          0: JS_VARIABLE_DECLARATOR@381..407
            0: JS_IDENTIFIER_BINDING@381..384
              0: IDENT@381..384 "b4" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@384..407
              0: EQ@384..386 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@386..407
                0: TS_INSTANTIATION_EXPRESSION@386..395
                  0: JS_IDENTIFIER_EXPRESSION@386..387
                    0: JS_REFERENCE_IDENTIFIER@386..387
                      0: IDENT@386..387 "f" [] []
                  1: TS_TYPE_ARGUMENTS@387..395
                    0: L_ANGLE@387..388 "<" [] []
                    1: TS_TYPE_ARGUMENT_LIST@388..394
                      0: TS_NUMBER_TYPE@388..394
                        0: NUMBER_KW@388..394 "number" [] []
                    2: R_ANGLE@394..395 ">" [] []
                1: QUESTIONDOT@395..397 "?." [] []
                2: TS_TYPE_ARGUMENTS@397..405
                  0: L_ANGLE@397..398 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@398..404
                    0: TS_NUMBER_TYPE@398..404
                      0: NUMBER_KW@398..404 "number" [] []
                  2: R_ANGLE@404..405 ">" [] []
                3: JS_CALL_ARGUMENTS@405..407
                  0: L_PAREN@405..406 "(" [] []
                  1: JS_CALL_ARGUMENT_LIST@406..406
                  2: R_PAREN@406..407 ")" [] []
      1: SEMICOLON@407..451 ";" [] [Whitespace("  "), Comments("// Type Error, expect ...")]
    12: JS_VARIABLE_STATEMENT@451..478
      0: JS_VARIABLE_DECLARATION@451..477
        0: CONST_KW@451..458 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@458..477
          0: JS_VARIABLE_DECLARATOR@458..477
            0: JS_IDENTIFIER_BINDING@458..461
              0: IDENT@458..461 "x1" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@461..477
              0: EQ@461..463 "=" [] [Whitespace(" ")]
              1: JS_CALL_EXPRESSION@463..477
                0: JS_IDENTIFIER_EXPRESSION@463..464
                  0: JS_REFERENCE_IDENTIFIER@463..464
                    0: IDENT@463..464 "f" [] []
                1: (empty)
                2: TS_TYPE_ARGUMENTS@464..470
                  0: L_ANGLE@464..465 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@465..469
                    0: TS_BOOLEAN_LITERAL_TYPE@465..469
                      0: TRUE_KW@465..469 "true" [] []
                  2: R_ANGLE@469..470 ">" [] []
                3: JS_CALL_ARGUMENTS@470..477
                  0: L_PAREN@470..472 "(" [Newline("\n")] []
                  1: JS_CALL_ARGUMENT_LIST@472..476
                    0: JS_BOOLEAN_LITERAL_EXPRESSION@472..476
                      0: TRUE_KW@472..476 "true" [] []
                  2: R_PAREN@476..477 ")" [] []
      1: SEMICOLON@477..478 ";" [] []
    13: JS_VARIABLE_STATEMENT@478..497
      0: JS_VARIABLE_DECLARATION@478..497
        0: CONST_KW@478..485 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@485..497
          0: JS_VARIABLE_DECLARATOR@485..497
            0: JS_IDENTIFIER_BINDING@485..488
              0: IDENT@485..488 "x2" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@488..497
              0: EQ@488..490 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@490..497
                0: JS_IDENTIFIER_EXPRESSION@490..491
                  0: JS_REFERENCE_IDENTIFIER@490..491
                    0: IDENT@490..491 "f" [] []
                1: TS_TYPE_ARGUMENTS@491..497
                  0: L_ANGLE@491..492 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@492..496
                    0: TS_BOOLEAN_LITERAL_TYPE@492..496
                      0: TRUE_KW@492..496 "true" [] []
                  2: R_ANGLE@496..497 ">" [] []
      1: (empty)
    14: JS_EXPRESSION_STATEMENT@497..503
      0: JS_BOOLEAN_LITERAL_EXPRESSION@497..502
        0: TRUE_KW@497..502 "true" [Newline("\n")] []
      1: SEMICOLON@502..503 ";" [] []
    15: JS_VARIABLE_STATEMENT@503..523
      0: JS_VARIABLE_DECLARATION@503..522
        0: CONST_KW@503..510 "const" [Newline("\n")] [Whitespace(" ")]
        1: JS_VARIABLE_DECLARATOR_LIST@510..522
          0: JS_VARIABLE_DECLARATOR@510..522
            0: JS_IDENTIFIER_BINDING@510..513
              0: IDENT@510..513 "x3" [] [Whitespace(" ")]
            1: (empty)
            2: JS_INITIALIZER_CLAUSE@513..522
              0: EQ@513..515 "=" [] [Whitespace(" ")]
              1: TS_INSTANTIATION_EXPRESSION@515..522
                0: JS_IDENTIFIER_EXPRESSION@515..516
                  0: JS_REFERENCE_IDENTIFIER@515..516
                    0: IDENT@515..516 "f" [] []
                1: TS_TYPE_ARGUMENTS@516..522
                  0: L_ANGLE@516..517 "<" [] []
                  1: TS_TYPE_ARGUMENT_LIST@517..521
                    0: TS_BOOLEAN_LITERAL_TYPE@517..521
                      0: TRUE_KW@517..521 "true" [] []
                  2: R_ANGLE@521..522 ">" [] []
      1: SEMICOLON@522..523 ";" [] []
    16: JS_EXPRESSION_STATEMENT@523..529
      0: JS_BOOLEAN_LITERAL_EXPRESSION@523..528
        0: TRUE_KW@523..528 "true" [Newline("\n")] []
      1: SEMICOLON@528..529 ";" [] []
    17: JS_EXPRESSION_STATEMENT@529..540
      0: TS_INSTANTIATION_EXPRESSION@529..539
        0: JS_PARENTHESIZED_EXPRESSION@529..536
          0: L_PAREN@529..531 "(" [Newline("\n")] []
          1: TS_INSTANTIATION_EXPRESSION@531..535
            0: JS_IDENTIFIER_EXPRESSION@531..532
              0: JS_REFERENCE_IDENTIFIER@531..532
                0: IDENT@531..532 "f" [] []
            1: TS_TYPE_ARGUMENTS@532..535
              0: L_ANGLE@532..533 "<" [] []
              1: TS_TYPE_ARGUMENT_LIST@533..534
                0: TS_REFERENCE_TYPE@533..534
                  0: JS_REFERENCE_IDENTIFIER@533..534
                    0: IDENT@533..534 "T" [] []
                  1: (empty)
              2: R_ANGLE@534..535 ">" [] []
          2: R_PAREN@535..536 ")" [] []
        1: TS_TYPE_ARGUMENTS@536..539
          0: L_ANGLE@536..537 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@537..538
            0: TS_REFERENCE_TYPE@537..538
              0: JS_REFERENCE_IDENTIFIER@537..538
                0: IDENT@537..538 "K" [] []
              1: (empty)
          2: R_ANGLE@538..539 ">" [] []
      1: SEMICOLON@539..540 ";" [] []
    18: JS_EXPRESSION_STATEMENT@540..553
      0: JS_CALL_EXPRESSION@540..552
        0: JS_PARENTHESIZED_EXPRESSION@540..547
          0: L_PAREN@540..542 "(" [Newline("\n")] []
          1: TS_INSTANTIATION_EXPRESSION@542..546
            0: JS_IDENTIFIER_EXPRESSION@542..543
              0: JS_REFERENCE_IDENTIFIER@542..543
                0: IDENT@542..543 "f" [] []
            1: TS_TYPE_ARGUMENTS@543..546
              0: L_ANGLE@543..544 "<" [] []
              1: TS_TYPE_ARGUMENT_LIST@544..545
                0: TS_REFERENCE_TYPE@544..545
                  0: JS_REFERENCE_IDENTIFIER@544..545
                    0: IDENT@544..545 "T" [] []
                  1: (empty)
              2: R_ANGLE@545..546 ">" [] []
          2: R_PAREN@546..547 ")" [] []
        1: (empty)
        2: TS_TYPE_ARGUMENTS@547..550
          0: L_ANGLE@547..548 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@548..549
            0: TS_REFERENCE_TYPE@548..549
              0: JS_REFERENCE_IDENTIFIER@548..549
                0: IDENT@548..549 "K" [] []
              1: (empty)
          2: R_ANGLE@549..550 ">" [] []
        3: JS_CALL_ARGUMENTS@550..552
          0: L_PAREN@550..551 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@551..551
          2: R_PAREN@551..552 ")" [] []
      1: SEMICOLON@552..553 ";" [] []
    19: JS_EXPRESSION_STATEMENT@553..568
      0: JS_CALL_EXPRESSION@553..567
        0: TS_INSTANTIATION_EXPRESSION@553..563
          0: JS_PARENTHESIZED_EXPRESSION@553..560
            0: L_PAREN@553..555 "(" [Newline("\n")] []
            1: TS_INSTANTIATION_EXPRESSION@555..559
              0: JS_IDENTIFIER_EXPRESSION@555..556
                0: JS_REFERENCE_IDENTIFIER@555..556
                  0: IDENT@555..556 "f" [] []
              1: TS_TYPE_ARGUMENTS@556..559
                0: L_ANGLE@556..557 "<" [] []
                1: TS_TYPE_ARGUMENT_LIST@557..558
                  0: TS_REFERENCE_TYPE@557..558
                    0: JS_REFERENCE_IDENTIFIER@557..558
                      0: IDENT@557..558 "T" [] []
                    1: (empty)
                2: R_ANGLE@558..559 ">" [] []
            2: R_PAREN@559..560 ")" [] []
          1: TS_TYPE_ARGUMENTS@560..563
            0: L_ANGLE@560..561 "<" [] []
            1: TS_TYPE_ARGUMENT_LIST@561..562
              0: TS_REFERENCE_TYPE@561..562
                0: JS_REFERENCE_IDENTIFIER@561..562
                  0: IDENT@561..562 "K" [] []
                1: (empty)
            2: R_ANGLE@562..563 ">" [] []
        1: QUESTIONDOT@563..565 "?." [] []
        2: (empty)
        3: JS_CALL_ARGUMENTS@565..567
          0: L_PAREN@565..566 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@566..566
          2: R_PAREN@566..567 ")" [] []
      1: SEMICOLON@567..568 ";" [] []
    20: JS_EXPRESSION_STATEMENT@568..584
      0: JS_CALL_EXPRESSION@568..583
        0: JS_PARENTHESIZED_EXPRESSION@568..578
          0: L_PAREN@568..570 "(" [Newline("\n")] []
          1: TS_INSTANTIATION_EXPRESSION@570..577
            0: JS_STATIC_MEMBER_EXPRESSION@570..574
              0: JS_IDENTIFIER_EXPRESSION@570..571
                0: JS_REFERENCE_IDENTIFIER@570..571
                  0: IDENT@570..571 "a" [] []
              1: QUESTIONDOT@571..573 "?." [] []
              2: JS_NAME@573..574
                0: IDENT@573..574 "f" [] []
            1: TS_TYPE_ARGUMENTS@574..577
              0: L_ANGLE@574..575 "<" [] []
              1: TS_TYPE_ARGUMENT_LIST@575..576
                0: TS_REFERENCE_TYPE@575..576
                  0: JS_REFERENCE_IDENTIFIER@575..576
                    0: IDENT@575..576 "T" [] []
                  1: (empty)
              2: R_ANGLE@576..577 ">" [] []
          2: R_PAREN@577..578 ")" [] []
        1: (empty)
        2: TS_TYPE_ARGUMENTS@578..581
          0: L_ANGLE@578..579 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@579..580
            0: TS_REFERENCE_TYPE@579..580
              0: JS_REFERENCE_IDENTIFIER@579..580
                0: IDENT@579..580 "K" [] []
              1: (empty)
          2: R_ANGLE@580..581 ">" [] []
        3: JS_CALL_ARGUMENTS@581..583
          0: L_PAREN@581..582 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@582..582
          2: R_PAREN@582..583 ")" [] []
      1: SEMICOLON@583..584 ";" [] []
    21: JS_EXPRESSION_STATEMENT@584..601
      0: JS_NEW_EXPRESSION@584..600
        0: NEW_KW@584..589 "new" [Newline("\n")] [Whitespace(" ")]
        1: JS_PARENTHESIZED_EXPRESSION@589..595
          0: L_PAREN@589..590 "(" [] []
          1: TS_INSTANTIATION_EXPRESSION@590..594
            0: JS_IDENTIFIER_EXPRESSION@590..591
              0: JS_REFERENCE_IDENTIFIER@590..591
                0: IDENT@590..591 "a" [] []
            1: TS_TYPE_ARGUMENTS@591..594
              0: L_ANGLE@591..592 "<" [] []
              1: TS_TYPE_ARGUMENT_LIST@592..593
                0: TS_REFERENCE_TYPE@592..593
                  0: JS_REFERENCE_IDENTIFIER@592..593
                    0: IDENT@592..593 "T" [] []
                  1: (empty)
              2: R_ANGLE@593..594 ">" [] []
          2: R_PAREN@594..595 ")" [] []
        2: TS_TYPE_ARGUMENTS@595..598
          0: L_ANGLE@595..596 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@596..597
            0: TS_REFERENCE_TYPE@596..597
              0: JS_REFERENCE_IDENTIFIER@596..597
                0: IDENT@596..597 "K" [] []
              1: (empty)
          2: R_ANGLE@597..598 ">" [] []
        3: JS_CALL_ARGUMENTS@598..600
          0: L_PAREN@598..599 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@599..599
          2: R_PAREN@599..600 ")" [] []
      1: SEMICOLON@600..601 ";" [] []
    22: JS_EXPRESSION_STATEMENT@601..620
      0: JS_CALL_EXPRESSION@601..619
        0: TS_INSTANTIATION_EXPRESSION@601..615
          0: JS_IDENTIFIER_EXPRESSION@601..603
            0: JS_REFERENCE_IDENTIFIER@601..603
              0: IDENT@601..603 "f" [Newline("\n")] []
          1: TS_TYPE_ARGUMENTS@603..615
            0: L_ANGLE@603..604 "<" [] []
            1: TS_TYPE_ARGUMENT_LIST@604..614
              0: TS_FUNCTION_TYPE@604..614
                0: TS_TYPE_PARAMETERS@604..607
                  0: L_ANGLE@604..605 "<" [] []
                  1: TS_TYPE_PARAMETER_LIST@605..606
                    0: TS_TYPE_PARAMETER@605..606
                      0: TS_TYPE_PARAMETER_NAME@605..606
                        0: IDENT@605..606 "T" [] []
                      1: (empty)
                      2: (empty)
                  2: R_ANGLE@606..607 ">" [] []
                1: JS_PARAMETERS@607..610
                  0: L_PAREN@607..608 "(" [] []
                  1: JS_PARAMETER_LIST@608..608
                  2: R_PAREN@608..610 ")" [] [Whitespace(" ")]
                2: FAT_ARROW@610..613 "=>" [] [Whitespace(" ")]
                3: TS_REFERENCE_TYPE@613..614
                  0: JS_REFERENCE_IDENTIFIER@613..614
                    0: IDENT@613..614 "T" [] []
                  1: (empty)
            2: R_ANGLE@614..615 ">" [] []
        1: QUESTIONDOT@615..617 "?." [] []
        2: (empty)
        3: JS_CALL_ARGUMENTS@617..619
          0: L_PAREN@617..618 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@618..618
          2: R_PAREN@618..619 ")" [] []
      1: SEMICOLON@619..620 ";" [] []
    23: JS_EXPRESSION_STATEMENT@620..639
      0: JS_CALL_EXPRESSION@620..638
        0: JS_IDENTIFIER_EXPRESSION@620..622
          0: JS_REFERENCE_IDENTIFIER@620..622
            0: IDENT@620..622 "f" [Newline("\n")] []
        1: QUESTIONDOT@622..624 "?." [] []
        2: TS_TYPE_ARGUMENTS@624..636
          0: L_ANGLE@624..625 "<" [] []
          1: TS_TYPE_ARGUMENT_LIST@625..635
            0: TS_FUNCTION_TYPE@625..635
              0: TS_TYPE_PARAMETERS@625..628
                0: L_ANGLE@625..626 "<" [] []
                1: TS_TYPE_PARAMETER_LIST@626..627
                  0: TS_TYPE_PARAMETER@626..627
                    0: TS_TYPE_PARAMETER_NAME@626..627
                      0: IDENT@626..627 "T" [] []
                    1: (empty)
                    2: (empty)
                2: R_ANGLE@627..628 ">" [] []
              1: JS_PARAMETERS@628..631
                0: L_PAREN@628..629 "(" [] []
                1: JS_PARAMETER_LIST@629..629
                2: R_PAREN@629..631 ")" [] [Whitespace(" ")]
              2: FAT_ARROW@631..634 "=>" [] [Whitespace(" ")]
              3: TS_REFERENCE_TYPE@634..635
                0: JS_REFERENCE_IDENTIFIER@634..635
                  0: IDENT@634..635 "T" [] []
                1: (empty)
          2: R_ANGLE@635..636 ">" [] []
        3: JS_CALL_ARGUMENTS@636..638
          0: L_PAREN@636..637 "(" [] []
          1: JS_CALL_ARGUMENT_LIST@637..637
          2: R_PAREN@637..638 ")" [] []
      1: SEMICOLON@638..639 ";" [] []
    24: JS_EXPRESSION_STATEMENT@639..659
      0: JS_CONDITIONAL_EXPRESSION@639..658
        0: TS_INSTANTIATION_EXPRESSION@639..645
          0: JS_IDENTIFIER_EXPRESSION@639..641
            0: JS_REFERENCE_IDENTIFIER@639..641
              0: IDENT@639..641 "f" [Newline("\n")] []
          1: TS_TYPE_ARGUMENTS@641..645
            0: L_ANGLE@641..642 "<" [] []
            1: TS_TYPE_ARGUMENT_LIST@642..643
              0: TS_REFERENCE_TYPE@642..643
                0: JS_REFERENCE_IDENTIFIER@642..643
                  0: IDENT@642..643 "x" [] []
                1: (empty)
            2: R_ANGLE@643..645 ">" [] [Whitespace(" ")]
        1: QUESTION@645..647 "?" [] [Whitespace(" ")]
        2: TS_INSTANTIATION_EXPRESSION@647..652
          0: JS_IDENTIFIER_EXPRESSION@647..648
            0: JS_REFERENCE_IDENTIFIER@647..648
              0: IDENT@647..648 "g" [] []
          1: TS_TYPE_ARGUMENTS@648..652
            0: L_ANGLE@648..649 "<" [] []
            1: TS_TYPE_ARGUMENT_LIST@649..650
              0: TS_REFERENCE_TYPE@649..650
                0: JS_REFERENCE_IDENTIFIER@649..650
                  0: IDENT@649..650 "y" [] []
                1: (empty)
            2: R_ANGLE@650..652 ">" [] [Whitespace(" ")]
        3: COLON@652..654 ":" [] [Whitespace(" ")]
        4: TS_INSTANTIATION_EXPRESSION@654..658
          0: JS_IDENTIFIER_EXPRESSION@654..655
            0: JS_REFERENCE_IDENTIFIER@654..655
              0: IDENT@654..655 "h" [] []
          1: TS_TYPE_ARGUMENTS@655..658
            0: L_ANGLE@655..656 "<" [] []
            1: TS_TYPE_ARGUMENT_LIST@656..657
              0: TS_REFERENCE_TYPE@656..657
                0: JS_REFERENCE_IDENTIFIER@656..657
                  0: IDENT@656..657 "z" [] []
                1: (empty)
            2: R_ANGLE@657..658 ">" [] []
      1: SEMICOLON@658..659 ";" [] []
    25: JS_EXPRESSION_STATEMENT@659..667
      0: JS_ARRAY_EXPRESSION@659..666
        0: L_BRACK@659..661 "[" [Newline("\n")] []
        1: JS_ARRAY_ELEMENT_LIST@661..665
          0: TS_INSTANTIATION_EXPRESSION@661..665
            0: JS_IDENTIFIER_EXPRESSION@661..662
              0: JS_REFERENCE_IDENTIFIER@661..662
                0: IDENT@661..662 "f" [] []
            1: TS_TYPE_ARGUMENTS@662..665
              0: L_ANGLE@662..663 "<" [] []
              1: TS_TYPE_ARGUMENT_LIST@663..664
                0: TS_REFERENCE_TYPE@663..664
                  0: JS_REFERENCE_IDENTIFIER@663..664
                    0: IDENT@663..664 "x" [] []
                  1: (empty)
              2: R_ANGLE@664..665 ">" [] []
        2: R_BRACK@665..666 "]" [] []
      1: SEMICOLON@666..667 ";" [] []
    26: JS_BLOCK_STATEMENT@667..676
      0: L_CURLY@667..670 "{" [Newline("\n")] [Whitespace(" ")]
      1: JS_STATEMENT_LIST@670..675
        0: JS_EXPRESSION_STATEMENT@670..675
          0: TS_INSTANTIATION_EXPRESSION@670..675
            0: JS_IDENTIFIER_EXPRESSION@670..671
              0: JS_REFERENCE_IDENTIFIER@670..671
                0: IDENT@670..671 "f" [] []
            1: TS_TYPE_ARGUMENTS@671..675
              0: L_ANGLE@671..672 "<" [] []
              1: TS_TYPE_ARGUMENT_LIST@672..673
                0: TS_REFERENCE_TYPE@672..673
                  0: JS_REFERENCE_IDENTIFIER@672..673
                    0: IDENT@672..673 "x" [] []
                  1: (empty)
              2: R_ANGLE@673..675 ">" [] [Whitespace(" ")]
          1: (empty)
      2: R_CURLY@675..676 "}" [] []
  3: EOF@676..677 "" [Newline("\n")] []
